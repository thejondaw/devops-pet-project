name: CD - Infrastructure Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "develop"
        type: choice
        options: [develop, stage, master]
      action:
        description: "Action to perform"
        required: true
        type: choice
        options: [apply, destroy]
        default: "apply"
  push:
    branches: ["master", "stage", "develop"]
    paths:
      - "terraform/**"
      - ".github/workflows/cd-infrastructure.yaml"
      - "scripts/post-install.sh"
      - "Makefile"

env:
  AWS_REGION: us-east-2
  TF_BACKEND_BUCKET: alexsuff
  TARGET_ENV: ${{ github.event.inputs.environment || github.ref_name }}

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Format Check
        run: |
          echo "Checking Terraform formatting..."
          terraform fmt -check -recursive terraform/

      - name: Install TFLint
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash

      - name: Run TFLint
        run: |
          echo "Running TFLint..."
          tflint --recursive terraform/

      - name: Install tfsec
        run: |
          curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash

      - name: Run tfsec
        run: |
          echo "Running tfsec security checks..."
          tfsec terraform/

      - name: Install checkov
        run: |
          pip install checkov

      - name: Run checkov
        run: |
          echo "Running checkov policy checks..."
          checkov -d terraform/ --framework terraform

  prepare:
    needs: lint
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set deployment matrix
        id: set-matrix
        run: |
          if [[ "${{ github.event.inputs.action }}" == "destroy" ]]; then
            echo "matrix={\"module\":[\"tools\",\"rds\",\"eks\",\"vpc\",\"backend\"]}" >> $GITHUB_OUTPUT
          else
            echo "matrix={\"module\":[\"backend\",\"vpc\",\"eks\",\"rds\",\"tools\"]}" >> $GITHUB_OUTPUT
          fi

  deploy:
    needs: prepare
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || github.ref_name }}
    strategy:
      matrix: ${{ fromJSON(needs.prepare.outputs.matrix) }}
      fail-fast: true
      max-parallel: 1

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Process Terraform Module
        working-directory: terraform/modules/${{ matrix.module }}
        env:
          IS_BACKEND: ${{ matrix.module == 'backend' }}
          ACTION: ${{ github.event.inputs.action || 'apply' }}
        run: |
          # Initialize Terraform
          if [[ "$IS_BACKEND" == "true" ]]; then
            terraform init
          else
            terraform init \
              -backend-config="bucket=${{ env.TF_BACKEND_BUCKET }}" \
              -backend-config="key=environments/${{ env.TARGET_ENV }}/${{ matrix.module }}.tfstate" \
              -backend-config="region=${{ env.AWS_REGION }}"
          fi

          # Validate configuration
          terraform validate

          # Apply or Destroy
          terraform ${{ env.ACTION }} -auto-approve \
            -var-file=../../environments/${{ env.TARGET_ENV }}/terraform.tfvars

  post-install:
    needs: deploy
    if: github.event.inputs.action != 'destroy'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || github.ref_name }}
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      - name: Run post-install script
        run: |
          chmod +x scripts/post-install.sh
          ./scripts/post-install.sh ${{ env.TARGET_ENV }}
