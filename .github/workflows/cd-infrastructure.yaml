name: CD - Infrastructure Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "develop"
        type: choice
        options: [develop, stage, master]
      action:
        description: "Action to perform"
        required: true
        type: choice
        options: [apply, destroy]
        default: "apply"
  push:
    branches: ["master", "stage", "develop"]
    paths:
      - "terraform/**"
      - ".github/workflows/cd-infrastructure.yaml"
      - "Makefile"
      - "scripts/post-install.sh"

env:
  AWS_REGION: us-east-2
  TF_BACKEND_BUCKET: alexsuff
  TARGET_ENV: ${{ github.event.inputs.environment || github.ref_name }}

jobs:
  lint:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    continue-on-error: true
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Format Fix
        id: fmt
        run: |
          echo "Running terraform fmt..."
          terraform fmt -recursive terraform/

          # Проверяем, есть ли изменения после форматирования
          if [[ -n $(git status --porcelain) ]]; then
            echo "::notice::Terraform formatting issues were found and fixed"
            echo "formatted=true" >> $GITHUB_OUTPUT
          else
            echo "::notice::No formatting issues found"
            echo "formatted=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit Formatting Changes
        if: steps.fmt.outputs.formatted == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add terraform/
          git commit -m "chore: auto-format terraform files" || echo "No changes to commit"
          git push || echo "No changes to push"

      - name: Install TFLint
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash

      - name: Run TFLint
        continue-on-error: true
        run: |
          echo "Running TFLint analysis..."
          cat << EOF > .tflint.hcl
          plugin "aws" {
            enabled = true
            version = "0.27.0"
            source  = "github.com/terraform-linters/tflint-ruleset-aws"
          }

          config {
            module = true
            force = false
          }

          rule "terraform_deprecated_index" {
            enabled = true
          }

          rule "terraform_unused_declarations" {
            enabled = true
          }

          rule "terraform_comment_syntax" {
            enabled = true
          }

          rule "terraform_documented_outputs" {
            enabled = true
          }

          rule "terraform_documented_variables" {
            enabled = true
          }

          rule "terraform_typed_variables" {
            enabled = true
          }

          rule "terraform_naming_convention" {
            enabled = true
          }

          rule "terraform_required_version" {
            enabled = true
          }

          rule "terraform_required_providers" {
            enabled = true
          }
          EOF

          tflint --init

          for module in terraform/modules/*; do
            if [ -d "$module" ]; then
              echo "Analyzing module: $module"
              tflint --chdir="$module" --format=compact || {
                echo "::warning ::TFLint found issues in $module. See output above."
              }
            fi
          done

          echo "Analyzing root terraform directory..."
          tflint --chdir="terraform" --format=compact || {
            echo "::warning ::TFLint found issues in root terraform directory. See output above."
          }

      - name: Install tfsec
        run: |
          curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash

      - name: Run tfsec
        continue-on-error: true
        run: |
          echo "Running security checks with tfsec..."
          tfsec terraform/ --format text || {
            echo "::warning ::Security issues detected by tfsec. Review findings above."
          }

      - name: Install checkov
        run: |
          pip install checkov

      - name: Run checkov
        continue-on-error: true
        run: |
          echo "Running policy checks with checkov..."
          checkov -d terraform/ --framework terraform --output cli || {
            echo "::warning ::Policy violations detected by checkov. Review findings above."
          }

      # Создаем общий отчет о проверках
      - name: Generate Lint Summary
        if: always()
        run: |
          echo "### Infrastructure Code Analysis Summary" >> $GITHUB_STEP_SUMMARY
          echo "* Terraform Format: Completed $([ "${{ steps.fmt.outputs.formatted }}" == "true" ] && echo "with fixes" || echo "without issues")" >> $GITHUB_STEP_SUMMARY
          echo "* TFLint static analysis: Completed" >> $GITHUB_STEP_SUMMARY
          echo "* Tfsec security checks: Completed" >> $GITHUB_STEP_SUMMARY
          echo "* Checkov policy verification: Completed" >> $GITHUB_STEP_SUMMARY
          echo "⚠️ Check job logs for detailed findings" >> $GITHUB_STEP_SUMMARY

  prepare:
    needs: lint
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set deployment matrix
        id: set-matrix
        run: |
          if [[ "${{ github.event.inputs.action }}" == "destroy" ]]; then
            echo "matrix={\"module\":[\"tools\",\"rds\",\"eks\",\"vpc\",\"backend\"]}" >> $GITHUB_OUTPUT
          else
            echo "matrix={\"module\":[\"backend\",\"vpc\",\"eks\",\"rds\",\"tools\"]}" >> $GITHUB_OUTPUT
          fi

  deploy:
    needs: prepare
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || github.ref_name }}
    strategy:
      matrix: ${{ fromJSON(needs.prepare.outputs.matrix) }}
      fail-fast: true
      max-parallel: 1

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Process Terraform Module
        working-directory: terraform/modules/${{ matrix.module }}
        env:
          IS_BACKEND: ${{ matrix.module == 'backend' }}
          ACTION: ${{ github.event.inputs.action || 'apply' }}
        run: |
          # Initialize Terraform
          if [[ "$IS_BACKEND" == "true" ]]; then
            terraform init
          else
            terraform init \
              -backend-config="bucket=${{ env.TF_BACKEND_BUCKET }}" \
              -backend-config="key=environments/${{ env.TARGET_ENV }}/${{ matrix.module }}.tfstate" \
              -backend-config="region=${{ env.AWS_REGION }}"
          fi

          # Validate configuration, но не блокируем при ошибках
          echo "Running terraform validate..."
          terraform validate || {
            echo "::warning ::Terraform validation issues found. Proceeding with caution."
          }

          # Apply or Destroy
          terraform ${{ env.ACTION }} -auto-approve \
            -var-file=../../environments/${{ env.TARGET_ENV }}/terraform.tfvars

  post-install:
    needs: deploy
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || github.ref_name }}
    if: github.event.inputs.action != 'destroy'

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      - name: Run post-install script
        run: |
          chmod +x scripts/post-install.sh
          ./scripts/post-install.sh ${{ env.TARGET_ENV }}
