name: CD - Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "develop"
        type: choice
        options: [develop, stage, master]
      action:
        description: "Action to perform"
        required: true
        type: choice
        options: [apply, destroy]
        default: "apply"

env:
  AWS_REGION: us-east-2
  TF_BACKEND_BUCKET: alexsuff
  TARGET_ENV: ${{ github.event.inputs.environment || github.ref_name }}

jobs:
  tf-format:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Format
        id: fmt
        run: |
          terraform fmt -recursive terraform/
          if [[ -n $(git status --porcelain) ]]; then
            echo "formatted=true" >> $GITHUB_OUTPUT
          else
            echo "formatted=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit Format Changes
        if: steps.fmt.outputs.formatted == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add terraform/
          git commit -m "chore: auto-format terraform files"
          git push

  tf-lint:
    needs: tf-format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install TFLint
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
          tflint --version

      - name: Configure TFLint
        run: |
          cat << EOF > .tflint.hcl
          plugin "aws" {
            enabled = true
            version = "0.30.0"
            source  = "github.com/terraform-linters/tflint-ruleset-aws"
          }
          config {
            call_module_type = "local"
            force = false
          }
          rule "terraform_deprecated_index" { enabled = true }
          rule "terraform_unused_declarations" { enabled = true }
          rule "terraform_required_version" { enabled = true }
          rule "terraform_required_providers" { enabled = true }
          rule "terraform_naming_convention" {
            enabled = true
            format = "snake_case"
          }
          EOF

      - name: Run TFLint
        run: |
          tflint --init
          for module in terraform/modules/*; do
            if [ -d "$module" ]; then
              echo "Analyzing module: $module"
              tflint --chdir="$module" --format=compact
            fi
          done

  deploy:
    needs: tf-lint
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || github.ref_name }}
    strategy:
      matrix:
        module: ${{ github.event.inputs.action == 'destroy' && fromJSON('["tools","rds","eks","vpc","backend"]') || fromJSON('["backend","vpc","eks","rds","tools"]') }}
      fail-fast: true
      max-parallel: 1
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Deploy Module
        working-directory: terraform/modules/${{ matrix.module }}
        env:
          IS_BACKEND: ${{ matrix.module == 'backend' }}
          ACTION: ${{ github.event.inputs.action || 'apply' }}
        run: |
          if [[ "$IS_BACKEND" == "true" ]]; then
            terraform init
          else
            terraform init \
              -backend-config="bucket=${{ env.TF_BACKEND_BUCKET }}" \
              -backend-config="key=environments/${{ env.TARGET_ENV }}/${{ matrix.module }}.tfstate" \
              -backend-config="region=${{ env.AWS_REGION }}"
          fi
          terraform validate
          terraform ${{ env.ACTION }} -auto-approve -var-file=../../environments/${{ env.TARGET_ENV }}/terraform.tfvars
