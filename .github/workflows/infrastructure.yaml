name: CD - Infrastructure Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'develop'
        type: choice
        options:
        - develop
        - stage
        - prod
      action:
        description: 'Action to perform'
        required: true
        type: choice
        options:
        - apply
        - destroy
        default: 'apply'

env:
  TF_STATE_BUCKET: "alexsuff"
  AWS_REGION: "us-east-2"

jobs:
  infrastructure:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      # VPC Deployment
      - name: Deploy VPC
        run: |
          cd terraform/modules/vpc
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=environments/${{ github.event.inputs.environment }}/vpc.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"

          if [[ "${{ github.event.inputs.action }}" == "apply" ]]; then
            terraform plan -var-file=../../environments/${{ github.event.inputs.environment }}/terraform.tfvars -out=plan.tfplan
            terraform apply -auto-approve plan.tfplan
          else
            terraform destroy -auto-approve -var-file=../../environments/${{ github.event.inputs.environment }}/terraform.tfvars
          fi

      # EKS Deployment
      - name: Deploy EKS
        if: success() && github.event.inputs.action == 'apply'
        run: |
          cd terraform/modules/eks
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=environments/${{ github.event.inputs.environment }}/eks.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"

          terraform plan -var-file=../../environments/${{ github.event.inputs.environment }}/terraform.tfvars -out=plan.tfplan
          terraform apply -auto-approve plan.tfplan

      # RDS Deployment
      - name: Deploy RDS
        if: success() && github.event.inputs.action == 'apply'
        run: |
          cd terraform/modules/rds
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=environments/${{ github.event.inputs.environment }}/rds.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"

          terraform plan -var-file=../../environments/${{ github.event.inputs.environment }}/terraform.tfvars -out=plan.tfplan
          terraform apply -auto-approve plan.tfplan

      # Reverse order for destruction
      - name: Destroy RDS
        if: github.event.inputs.action == 'destroy'
        run: |
          cd terraform/modules/rds
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=environments/${{ github.event.inputs.environment }}/rds.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"
          terraform destroy -auto-approve -var-file=../../environments/${{ github.event.inputs.environment }}/terraform.tfvars

      - name: Destroy EKS
        if: github.event.inputs.action == 'destroy'
        run: |
          cd terraform/modules/eks
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=environments/${{ github.event.inputs.environment }}/eks.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"
          terraform destroy -auto-approve -var-file=../../environments/${{ github.event.inputs.environment }}/terraform.tfvars