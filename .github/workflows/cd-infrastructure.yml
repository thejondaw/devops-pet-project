name: CD - Infrastructure Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Select environment to deploy to"
        required: true
        type: choice
        options:
          - develop
          - stage
          - prod
      action:
        description: "Select action to perform"
        required: true
        type: choice
        options:
          - apply
          - destroy
  push:
    branches: ["master", "stage", "develop"]
    paths:
      # Infrastructure related changes
      - "terraform/modules/vpc/**"
      - "terraform/modules/eks/**"
      - "terraform/modules/rds/**"
      - "terraform/environments/**/*.tfvars"
      - ".github/workflows/cd-infrastructure.yml"
      # Configuration files
      - "terraform/environments/develop/main.tf"
      - "terraform/environments/stage/main.tf"
      - "terraform/environments/prod/main.tf"
      - "Makefile"

env:
  TF_STATE_BUCKET: "alexsuff"
  AWS_REGION: "us-east-2"

jobs:
  infrastructure:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || github.ref_name }}

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      # VPC Deployment/Destruction
      - name: Handle VPC
        run: |
          cd terraform/modules/vpc
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=environments/${{ inputs.environment || github.ref_name }}/vpc.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"

          if [[ "${{ inputs.action }}" == "destroy" ]]; then
            echo "Destroying VPC..."
            terraform destroy -auto-approve -var-file=../../environments/${{ inputs.environment || github.ref_name }}/terraform.tfvars
          else
            echo "Deploying VPC..."
            terraform plan -var-file=../../environments/${{ inputs.environment || github.ref_name }}/terraform.tfvars -out=plan.tfplan
            terraform apply -auto-approve plan.tfplan
          fi

      # EKS Deployment/Destruction
      - name: Handle EKS
        if: ${{ inputs.action != 'destroy' }}
        run: |
          cd terraform/modules/eks
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=environments/${{ inputs.environment || github.ref_name }}/eks.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"

          echo "Deploying EKS..."
          terraform plan -var-file=../../environments/${{ inputs.environment || github.ref_name }}/terraform.tfvars -out=plan.tfplan
          terraform apply -auto-approve plan.tfplan

      - name: Destroy EKS
        if: ${{ inputs.action == 'destroy' }}
        run: |
          cd terraform/modules/eks
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=environments/${{ inputs.environment }}/eks.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"

          echo "Destroying EKS..."
          terraform destroy -auto-approve -var-file=../../environments/${{ inputs.environment }}/terraform.tfvars

      # RDS Deployment/Destruction
      - name: Handle RDS
        if: ${{ inputs.action != 'destroy' }}
        run: |
          cd terraform/modules/rds
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=environments/${{ inputs.environment || github.ref_name }}/rds.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"

          echo "Deploying RDS..."
          terraform plan -var-file=../../environments/${{ inputs.environment || github.ref_name }}/terraform.tfvars -out=plan.tfplan
          terraform apply -auto-approve plan.tfplan

      - name: Destroy RDS
        if: ${{ inputs.action == 'destroy' }}
        run: |
          cd terraform/modules/rds
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=environments/${{ inputs.environment }}/rds.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"

          echo "Destroying RDS..."
          terraform destroy -auto-approve -var-file=../../environments/${{ inputs.environment }}/terraform.tfvars
