name: CD - Infrastructure Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "develop"
        type: choice
        options:
          - develop
          - stage
          - prod
      action:
        description: "Action to perform"
        required: true
        type: choice
        options:
          - apply
          - destroy
        default: "apply"
  push:
    branches: ["master", "stage", "develop"]
    paths:
      # Infrastructure related changes
      - "terraform/modules/vpc/**"
      - "terraform/modules/eks/**"
      - "terraform/modules/rds/**"
      - "terraform/environments/**/*.tfvars"
      - ".github/workflows/cd-infrastructure.yml"
      # Configuration files
      - "terraform/environments/develop/main.tf"
      - "terraform/environments/stage/main.tf"
      - "terraform/environments/prod/main.tf"
      - "Makefile"

env:
  TF_STATE_BUCKET: "alexsuff"
  AWS_REGION: "us-east-2"

jobs:
  infrastructure:
    runs-on: ubuntu-latest
    # Use environment from input for manual triggers, default to branch name for push events
    environment: ${{ github.event.inputs.environment || github.ref_name }}

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      # VPC Deployment
      - name: Deploy VPC
        run: |
          cd terraform/modules/vpc
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=environments/${{ github.event.inputs.environment || github.ref_name }}/vpc.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"

          if [[ "${{ github.event.inputs.action }}" == "destroy" ]]; then
            terraform destroy -auto-approve -var-file=../../environments/${{ github.event.inputs.environment || github.ref_name }}/terraform.tfvars
          else
            terraform plan -var-file=../../environments/${{ github.event.inputs.environment || github.ref_name }}/terraform.tfvars -out=plan.tfplan
            terraform apply -auto-approve plan.tfplan
          fi

      # EKS Deployment
      - name: Deploy EKS
        if: success() && (github.event.inputs.action != 'destroy')
        run: |
          cd terraform/modules/eks
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=environments/${{ github.event.inputs.environment || github.ref_name }}/eks.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"

          terraform plan -var-file=../../environments/${{ github.event.inputs.environment || github.ref_name }}/terraform.tfvars -out=plan.tfplan
          terraform apply -auto-approve plan.tfplan

      # RDS Deployment
      - name: Deploy RDS
        if: success() && (github.event.inputs.action != 'destroy')
        run: |
          cd terraform/modules/rds
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=environments/${{ github.event.inputs.environment || github.ref_name }}/rds.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"

          terraform plan -var-file=../../environments/${{ github.event.inputs.environment || github.ref_name }}/terraform.tfvars -out=plan.tfplan
          terraform apply -auto-approve plan.tfplan

      # Reverse order for destruction
      - name: Destroy RDS
        if: github.event.inputs.action == 'destroy'
        run: |
          cd terraform/modules/rds
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=environments/${{ github.event.inputs.environment }}/rds.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"
          terraform destroy -auto-approve -var-file=../../environments/${{ github.event.inputs.environment }}/terraform.tfvars

      - name: Destroy EKS
        if: success() && github.event.inputs.action == 'destroy'
        run: |
          cd terraform/modules/eks
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=environments/${{ github.event.inputs.environment }}/eks.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"
          terraform destroy -auto-approve -var-file=../../environments/${{ github.event.inputs.environment }}/terraform.tfvars
