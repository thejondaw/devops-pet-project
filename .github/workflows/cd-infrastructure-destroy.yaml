name: CD - Infrastructure Destruction

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to destroy"
        required: true
        type: choice
        options:
          - develop
          - stage
          - prod
      confirm_destroy:
        description: "Type 'YES' to confirm destruction"
        required: true
        type: string
  push:
    branches: ["master", "stage", "develop"]
    paths:
      - ".github/workflows/cd-infrastructure-destroy.yaml"
      - "terraform/modules/**"
      - "terraform/environments/**"

env:
  TF_STATE_BUCKET: "alexsuff"
  AWS_REGION: "us-east-2"

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Check confirmation
        if: github.event.inputs.confirm_destroy != 'YES'
        run: |
          echo "Error: You must type 'YES' to confirm destruction"
          exit 1

      # Future enhancement: Check for maintenance window
      # - name: Check maintenance window
      #   run: |
      #     HOUR=$(date +%H)
      #     if [[ $HOUR -lt 2 || $HOUR -gt 4 ]]; then
      #       echo "Error: Destruction only allowed between 02:00-04:00 UTC"
      #       exit 1
      #     fi

      # Future enhancement: Notify about destruction start
      # - name: Send Slack notification about destruction start
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: ${{ job.status }}
      #     fields: repo,message,commit,author,action,workflow
      #     text: "ðŸš¨ Destruction of ${{ github.event.inputs.environment }} infrastructure initiated!"
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  destroy:
    needs: validate
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment }}
      url: ${{ github.event.inputs.environment == 'prod' && 'https://github.com/your-org/your-repo/deployments' || '' }}

    # Prevent concurrent destroys of the same environment
    concurrency:
      group: destroy-${{ github.event.inputs.environment }}
      cancel-in-progress: false

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      # Future enhancement: Create final backups
      # - name: Create final backups
      #   run: |
      #     # RDS final snapshot
      #     aws rds create-db-snapshot \
      #       --db-instance-identifier $DB_IDENTIFIER \
      #       --db-snapshot-identifier "final-snapshot-${GITHUB_SHA::8}"
      #
      #     # EKS configs backup
      #     kubectl get all --all-namespaces -o yaml > "eks-backup-${GITHUB_SHA::8}.yaml"
      #     aws s3 cp eks-backup-${GITHUB_SHA::8}.yaml s3://${{ env.TF_STATE_BUCKET }}/backups/

      # Destroy in reverse order - RDS first
      - name: Destroy RDS
        id: destroy-rds
        run: |
          cd terraform/modules/rds
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=environments/${{ github.event.inputs.environment }}/rds.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"

          terraform plan -destroy -var-file=../../environments/${{ github.event.inputs.environment }}/terraform.tfvars -out=destroy.tfplan
          terraform apply -auto-approve destroy.tfplan

      # Then destroy EKS
      - name: Destroy EKS
        id: destroy-eks
        if: success()
        run: |
          cd terraform/modules/eks
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=environments/${{ github.event.inputs.environment }}/eks.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"

          terraform plan -destroy -var-file=../../environments/${{ github.event.inputs.environment }}/terraform.tfvars -out=destroy.tfplan
          terraform apply -auto-approve destroy.tfplan

      # Finally destroy VPC
      - name: Destroy VPC
        id: destroy-vpc
        if: success()
        run: |
          cd terraform/modules/vpc
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=environments/${{ github.event.inputs.environment }}/vpc.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"

          terraform plan -destroy -var-file=../../environments/${{ github.event.inputs.environment }}/terraform.tfvars -out=destroy.tfplan
          terraform apply -auto-approve destroy.tfplan

      # Archive state files instead of deletion
      - name: Archive tfstate files
        if: success()
        run: |
          for state in rds eks vpc; do
            aws s3 mv \
              s3://${{ env.TF_STATE_BUCKET }}/environments/${{ github.event.inputs.environment }}/${state}.tfstate \
              s3://${{ env.TF_STATE_BUCKET }}/archived_states/${{ github.event.inputs.environment }}/${state}.tfstate-$(date +%s)
          done

      # Future enhancement: Final status notification
      # - name: Send Slack notification about destruction completion
      #   if: always()
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: ${{ job.status }}
      #     fields: repo,message,commit,author,action,workflow
      #     text: |
      #       Infrastructure destruction ${{ job.status }} for ${{ github.event.inputs.environment }}
      #       RDS: ${{ steps.destroy-rds.outcome }}
      #       EKS: ${{ steps.destroy-eks.outcome }}
      #       VPC: ${{ steps.destroy-vpc.outcome }}
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
