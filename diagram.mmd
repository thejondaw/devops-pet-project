flowchart TB
    User([User]) --> |HTTPS| WebsiteExternal[External Website\n Entry point for clients]
    WebsiteExternal --> |TLS| AWSWAF[AWS WAF\n Filters malicious traffic\n and DDoS attacks]

    subgraph AWS ["AWS Cloud"]
        AWSWAF --> |Traffic filtering| ELB[AWS Load Balancer\n Distributes load\n across cluster nodes]

        subgraph VPC ["VPC - Virtual Private Cloud"]
            subgraph PublicSubnets ["Public Subnets - Accessible from the internet"]
                ELB --> |HTTPS| NACL1[Network ACL\n First level\n of network filtering]
                NACL1 --> |Filtering| SG1[Security Group\n Second level of access\n control at port level]

                subgraph IngressControllerNS ["Namespace: ingress-nginx"]
                    SG1 --> |443| IC_Service["Service: ingress-nginx (LoadBalancer)\n Proxies external traffic\n into the cluster and back"]
                    IC_Service --> IC_Pods["NGINX Ingress Controller Pods\n Manage routing rules\n for HTTP/HTTPS requests"]
                end
            end

            subgraph PrivateSubnets ["Private Subnets - Isolated from the internet"]
                subgraph EKSCluster ["EKS Kubernetes Cluster"]
                    IC_Pods --> |Applies rules| K8sIngress["Ingress Resources\n Declarative routing rules\n based on hosts/paths"]

                    subgraph CertManagerNS ["Namespace: cert-manager"]
                        CertManagerService["Service: cert-manager\n Internal service for\n managing certificates"]
                        CertManagerPods["cert-manager Pods\n Automatically request\n and renew TLS certificates"]
                        CertManagerService --- CertManagerPods
                    end

                    CertManagerPods --> |Creates| TLSSecrets[(TLS certificates\n Used for\n encrypting traffic)]
                    K8sIngress --> |Uses| TLSSecrets

                    subgraph LinkerdNS ["Namespace: linkerd"]
                        LinkerdService["Service: linkerd-control-plane\n Entry point for managing\n service mesh"]
                        LinkerdPods["Linkerd Pods\n Provide mTLS, load balancing,\n and metrics for services"]
                        LinkerdService --- LinkerdPods
                    end

                    subgraph VaultNS ["Namespace: vault"]
                        VaultService["Service: vault\n Service for accessing\n secrets"]
                        VaultPods["Vault Pods\n Secure storage\n for secrets and keys"]
                        VaultService --- VaultPods
                    end

                    subgraph MonitoringNS ["Namespace: monitoring"]
                        PrometheusService["Service: prometheus\n Service for collecting and storing\n metrics"]
                        GrafanaService["Service: grafana\n Service for visualizing\n metrics and alerting"]
                        LokiService["Service: loki\n Service for processing\n and storing logs"]
                        PromtailService["Service: promtail\n Service for collecting logs\n from nodes and pods"]
                        FalcoService["Service: falco\n Service for runtime security monitoring"]

                        PrometheusService --- PrometheusPods["Prometheus Pods\n Collect, store, and\n alert on metrics"]
                        GrafanaService --- GrafanaPods["Grafana Pods\n Visualize metrics\n and logs in dashboards"]
                        LokiService --- LokiPods["Loki Pods\n Storage and indexing\n of logs"]
                        PromtailService --- PromtailPods["Promtail Pods\n Agents on each node\n for log collection"]
                        FalcoService --- FalcoPods["Falco Pods\n Monitor and alert on suspicious activity"]
                    end

                    subgraph AppNS ["Namespace: application"]
                        K8sIngress --> |Routes to| FrontendService["Service: frontend (ClusterIP)\n Internal load balancer\n for frontend pods"]
                        K8sIngress --> |Routes to| BackendService["Service: backend (ClusterIP)\n Internal load balancer\n for backend pods"]

                        FrontendService --> FrontendPods["Frontend Pods\n SPA application\n for user interface"]
                        BackendService --> BackendPods["Backend Pods\n API and business logic\n of the application"]

                        FrontendPods --- |Sidecar injection| LinkerdPods
                        BackendPods --- |Sidecar injection| LinkerdPods

                        FrontendPods --> |mTLS via Linkerd| BackendPods

                        FrontendPods -.-> |Retrieves secrets| VaultPods
                        BackendPods -.-> |Retrieves secrets| VaultPods
                    end

                    PrometheusPods -.-> |Scrapes metrics| AppNS
                    PromtailPods -.-> |Collects logs| AppNS

                    BackendPods --> |DB Connections| SG2[Security Group DB\n Access control to database\n at port level]
                end

                subgraph RDSDB ["Amazon RDS"]
                    SG2 --> |5432| PostgreSQL[(PostgreSQL\n Relational database\n for data storage)]
                end

                subgraph Docker ["Docker Registry"]
                    DockerRegistry[(Private Docker Registry\n Storage for\n container images)]
                end

                EKSCluster -.-> |Pulls images| DockerRegistry
            end
        end

        subgraph AWSServices ["Other AWS Services"]
            subgraph Route53 ["Route53"]
                DNSRecords[DNS Records\n Management of DNS records]
            end

            WebsiteExternal -.-> |DNS| DNSRecords
        end
    end

    %% Catppuccin Mocha color palette
    classDef base fill:#1e1e2e,stroke:#cdd6f4,color:#cdd6f4;
    classDef flamingo fill:#f38ba8,stroke:#1e1e2e,color:#1e1e2e;
    classDef pink fill:#f5c2e7,stroke:#1e1e2e,color:#1e1e2e;
    classDef mauve fill:#cba6f7,stroke:#1e1e2e,color:#1e1e2e;
    classDef red fill:#f38ba8,stroke:#1e1e2e,color:#1e1e2e;
    classDef maroon fill:#eba0ac,stroke:#1e1e2e,color:#1e1e2e;
    classDef peach fill:#fab387,stroke:#1e1e2e,color:#1e1e2e;
    classDef yellow fill:#f9e2af,stroke:#1e1e2e,color:#1e1e2e;
    classDef green fill:#a6e3a1,stroke:#1e1e2e,color:#1e1e2e;
    classDef teal fill:#94e2d5,stroke:#1e1e2e,color:#1e1e2e;
    classDef sky fill:#89dceb,stroke:#1e1e2e,color:#1e1e2e;
    classDef sapphire fill:#74c7ec,stroke:#1e1e2e,color:#1e1e2e;
    classDef blue fill:#89b4fa,stroke:#1e1e2e,color:#1e1e2e;
    classDef lavender fill:#b4befe,stroke:#1e1e2e,color:#1e1e2e;
    classDef securityGroup fill:#fab387,stroke:#1e1e2e,color:#1e1e2e;

    %% Kubernetes services
    classDef k8sService fill:#f38ba8,stroke:#1e1e2e,color:#1e1e2e,stroke-width:2px,stroke-dasharray: 5 5;

    %% Apply classes to elements
    class WebsiteExternal,User yellow;
    class VPC,AWS,PublicSubnets,PrivateSubnets base;
    class ELB blue;
    class DockerRegistry maroon;
    class AWSWAF red;
    class NACL1 red;
    class SG1,SG2 securityGroup;
    class IngressControllerNS,EKSCluster,AppNS,CertManagerNS,LinkerdNS,VaultNS,MonitoringNS blue;
    class K8sIngress,IC_Pods,VaultPods,PrometheusPods,GrafanaPods,LokiPods,PromtailPods,FalcoPods,FrontendPods,BackendPods lavender;
    class CertManagerPods red;
    class LinkerdPods red;
    class TLSSecrets red;
    class IC_Service blue;
    class VaultService blue;
    class PrometheusService blue;
    class GrafanaService blue;
    class LokiService blue;
    class PromtailService blue;
    class FalcoService blue;
    class FrontendService blue;
    class BackendService blue;
    class CertManagerService red;
    class LinkerdService red;
    class PostgreSQL,RDSDB green;
    class Route53,AWSServices sapphire;
    class DNSRecords red;
